@page "/pick-color"
@using ViewModel;
@inject IJSRuntime js;
<style>
    .display {
        height: 100px;
    }

    .slidecontainer {
        width: 100%;
    }

    /* The slider itself */
    .slider {
        -webkit-appearance: none; /* Override default CSS styles */
        appearance: none;
        width: 100%; /* Full-width */
        height: 25px; /* Specified height */
        background: #d3d3d3; /* Grey background */
        outline: none; /* Remove outline */
        opacity: 0.7; /* Set transparency (for mouse-over effects on hover) */
        -webkit-transition: .2s; /* 0.2 seconds transition on hover */
        transition: opacity .2s;
    }

        /* Mouse-over effects */
        .slider:hover {
            opacity: 1; /* Fully shown on mouse-over */
        }

        /* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */
        .slider::-webkit-slider-thumb {
            -webkit-appearance: none; /* Override default look */
            appearance: none;
            width: 25px; /* Set a specific slider handle width */
            height: 25px; /* Slider handle height */
            background: #4CAF50; /* Green background */
            cursor: pointer; /* Cursor on hover */
        }

        .slider::-moz-range-thumb {
            width: 25px; /* Set a specific slider handle width */
            height: 25px; /* Slider handle height */
            background: #4CAF50; /* Green background */
            cursor: pointer; /* Cursor on hover */
        }
</style>
@if (viewModel == null)
{
    <div class="alert alert-info" role="alert">
        Chờ cho việc khởi tạo ...
    </div>
}
else
{
<div class="container">
    <div class="row">
        <div class="col-4">
            <strong>Red</strong>
        </div>
        <div class="col-4">
            <strong>Green</strong>
        </div>
        <div class="col-4">
            <strong>Blue</strong>
        </div>
    </div>
    <div class="row">
        <div class="col-4 display" style="background-color: @PickColorViewModel.RGBConverter(viewModel.FromRgb(viewModel.R, 0, 0));">

        </div>
        <div class="col-4 display" style="background-color: @PickColorViewModel.RGBConverter(viewModel.FromRgb(0, viewModel.G, 0));">

        </div>
        <div class="col-4 display" style="background-color: @PickColorViewModel.RGBConverter(viewModel.FromRgb(0, 0, viewModel.B));">

        </div>
    </div>
    <div class="row">
        <div class="col-4">
            @viewModel.R
        </div>
        <div class="col-4">
            @viewModel.G
        </div>
        <div class="col-4">
            @viewModel.B
        </div>
    </div>
    <div class="row">
        <div class="col-4">
            <div class="slidecontainer">
                <input type="range" min="0" max="255" step="5" bind-value-oninput="@viewModel.R" value="@viewModel.R" class="slider" id="myRangeR" />
            </div>
        </div>
        <div class="col-4">
            <div class="slidecontainer">
                <input type="range" min="0" max="255" step="5" bind-value-oninput="@viewModel.G" value="@viewModel.G" class="slider" id="myRangeG" />
            </div>
        </div>
        <div class="col-4">
            <div class="slidecontainer">
                <input type="range" min="0" max="255" step="5" bind-value-oninput="@viewModel.B" value="@viewModel.B" class="slider" id="myRangeB" />
            </div>
        </div>
    </div>
    <div class="row display" style="background-color: @PickColorViewModel.RGBConverter(viewModel.currentColor);">

    </div>
</div>
}


@functions{

    [Inject]
    IJSRuntime JSRuntime { get; set; }

    PickColorViewModel viewModel { get; set; }

    protected override async Task OnInitAsync()
    {
        viewModel = new PickColorViewModel(JSRuntime);
        viewModel.Init(()=> {
            StateHasChanged();
        });
        await base.OnInitAsync();
    }
}